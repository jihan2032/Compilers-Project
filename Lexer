import java.lang.System;
import java.io.*;

class Lexer {
	Yylex tokenizer;
	public  Lexer(String fileName)
	{
	  try
	  {
	  tokenizer=new Yylex(new BufferedReader(new FileReader(fileName)));
	  }
	  catch(Exception e)
	  {

	  }
	}
	public Token nextToken()
	{
		Token next=null;
		try
		{
		 next=  tokenizer.getToken();
		}
		catch(Exception e)
		{
		}
		return next;
	}
	}


%%


%function getToken
%type Token
%char
%line


%{
	int mathmode = 0;
	//initialize  variables to be used by class
%}


%init{
//Add code to be executed on initialization of the lexer

%init}

START=(\\documentclass\{(.)+\})
PACKAGE=(\\usepackage\[(.)+\]\{(.)+\})
COMMENT=(%(.)*)
NEWLINE=([\\][\\])
TITLE=(\\title)
DATE=(\\date)
SUBTITLE=(\\subtitle)
SECTION=(\\section)
TEXTBF=(\\textbf)
TEXT=(\{(.)+\})
BEGIN=(\\begin\{document\})
END=(\\end\{document\})
MAKE=(\\maketitle)
BEGINITEMIZE=(\\begin\{itemize\})
ONEITEM=(\\item)
ENDITEMIZE=(\\end\{itemize\})
MATH=(\$)
NUMBER=([0-9])
VARIABLE=([a-z])
OPERATOR=([+-*/=^])
BEGINEQU=(\\begin\{equation\})
ENDEQU=(\\end\{equation\})
LABEL=(\\label\{(.)+\})
ERRORLINE=(\\errorcoming)
FUNCTION=(f)
BODY=[^\{\n%\\$]+


%%
<YYINITIAL> {TITLE} { return (new Token(Token.TITLE,yytext()));}
<YYINITIAL> {DATE} { return (new Token(Token.DATE,yytext()));}
<YYINITIAL> {SUBTITLE} { return (new Token(Token.SUB_TITLE,yytext()));}
<YYINITIAL> {SECTION} { return (new Token(Token.SECTION,yytext()));}
<YYINITIAL> {TEXTBF} { return (new Token(Token.BF,yytext()));}
<YYINITIAL> {TEXT} { return (new Token(Token.TEXT,yytext()));}
<YYINITIAL> {BEGIN} { return (new Token(Token.BEGIN,yytext()));}
<YYINITIAL> {END} { return (new Token(Token.END,yytext()));}
<YYINITIAL> {MAKE} { return (new Token(Token.MAKE,yytext()));}
<YYINITIAL> {START} { return (new Token(Token.DOC_CLASS,yytext()));}
<YYINITIAL> {PACKAGE} { return (new Token(Token.PACKAGE,yytext()));}
<YYINITIAL> {COMMENT} {}
<YYINITIAL> {NEWLINE} {return (new Token(Token.NEWLINE,yytext()));}
<YYINITIAL> {BEGINITEMIZE} {return (new Token(Token.BEGIN,yytext()));}
<YYINITIAL> {ONEITEM} {return (new Token(Token.ITEM,yytext()));}
<YYINITIAL> {ENDITEMIZE} {return (new Token(Token.END,yytext()));}
<YYINITIAL> \n {}
<YYINITIAL> {MATH} { mathmode++; if(mathmode % 2 == 1) { return (new Token(Token.MATHMODE,yytext()));}}
<YYINITIAL> {NUMBER} { return (new Token(Token.NM,yytext()));}
<YYINITIAL> {VARIABLE} {return (new Token(Token.VAR,yytext()));}
<YYINITIAL> {OPERATOR} {return (new Token(Token.OPERATOR,yytext()));}
<YYINITIAL> {BEGINEQU} { return (new Token(Token.BEGIN,yytext()));}
<YYINITIAL> {LABEL} { return (new Token(Token.LABEL,yytext()));}
<YYINITIAL> {ENDEQU} {return (new Token(Token.END,yytext()));}
<YYINITIAL> {FUNCTION} {return (new Token(Token.FUNC,yytext()));}
<YYINITIAL> {BODY} { if (mathmode % 2 == 0) {return (new Token(Token.BODY,yytext()));}}
<YYINITIAL> {ERRORLINE} {
  return new Token(Token.ERROR, "Line: " + yyline + " Undefined control sequence: " + yytext());
}
<YYINITIAL> . {
  return new Token(Token.ERROR, "Invalid input: " + yytext());
}
